<UserControl x:Class="WiredBrainCoffee.CustomersApp.View.CustomersView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:converter="clr-namespace:WiredBrainCoffee.CustomersApp.Converter" xmlns:viewmodel="clr-namespace:WiredBrainCoffee.CustomersApp.ViewModel" d:DataContext="{d:DesignInstance Type=viewmodel:CustomersViewModel}"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <!--Define a converter in resources-->
    <UserControl.Resources>
        <converter:NavigationSideToGridColumnConverter
            x:Key="NavigationSideToGridColumnConv"/>
        <DataTemplate x:Key="CustomerListView">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding FirstName}" FontWeight="Bold"/>
                <TextBlock Text="{Binding LastName}" Margin="5 0 0 0"/>
            </StackPanel>
        </DataTemplate>
    </UserControl.Resources>

    <!--Grid with two rows 1.Stackpanel holding button 2.Listview of customers-->
    <!--Name your elements when you want to access them in the code behind-->
    <!--Moved Column definitions to make it into a user control as there the move button is dependent on column value-->
    <Grid >
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"></ColumnDefinition>
            <ColumnDefinition></ColumnDefinition>
            <ColumnDefinition Width="auto"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <!--Bind the grid column value to the NavigationColumn property-->
        <!--use the converter key--> 
        <Grid Grid.Column="{Binding Path=NavigationSide, 
            Converter={StaticResource NavigationSideToGridColumnConv}}"  
              Background="#90886F" Width="260">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>
            
            <!--Stack holding three buttons-->
            <StackPanel Orientation="Horizontal">
                <Button Margin="10" Width="75" Command="{Binding AddCommand}">
                    <StackPanel Orientation="Horizontal">
                        <Image Source="/Images/add.png" Height="18" Margin="0 0 5 0"></Image>
                        <TextBlock Text="Add"></TextBlock>
                    </StackPanel>
                </Button>
                <Button Content="Delete" Margin="10" Width="75" Command="{Binding DeleteCommand}"></Button>
                <!--Define a click event for the move button-->
                <Button Margin="10" Width="75" Command="{Binding MoveNavigationCommand}">
                    <Image Source="/Images/move.png" Height="18"></Image>
                </Button>
            </StackPanel>
           
            <!--List of customers-->
            <!--Bind it to the observable collection of customers in the VM-->
            <!--SelectedItem holds the selected object in the list view-->
            <!--To display a property of the object use display memeber path-->
            <!--Can define a data template on the item template to bind details to display-->
            <ListView x:Name="customerListView" Grid.Row="1" Margin="0 10 0 0"
                      ItemsSource="{Binding Path=Customers}"
                      SelectedItem="{Binding SelectedCustomer, Mode=TwoWay}"
                      ItemTemplate ="{StaticResource CustomerListView}">
                
            </ListView>
        </Grid>

        <!--Customer details-->
        <!--If a customer is selected make this section visible using visibility converter-->
        <!--define the converter in app resources-->
        <StackPanel Margin="10"  Grid.Column="1" 
                    Visibility="{Binding IsCustomerSelected, Converter={StaticResource BooleanToVisibilityConv}}">
            <!--Bind the text of this textbox to an element defined by its name : this is the data source-->
            <!--Path defines the content that is displayed
            Mode controls the direction of update
            Update source controls when the update will be triggered-->
            
            <!--Set common styles for stack panel using style tag-->
           
            <Label>First Name:</Label>
            <TextBox Text="{Binding Path=SelectedCustomer.FirstName,
                Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     Style="{StaticResource TextBoxStyle}"/>

            <Label>Last Name:</Label>
            <TextBox Text="{Binding Path=SelectedCustomer.LastName,
                Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     Style="{StaticResource TextBoxStyle}"></TextBox>
            
            <!--Replace text with ischecked for a checkbox-->
            <CheckBox  IsChecked ="{Binding Path=SelectedCustomer.IsDeveloper,
                Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0 20 0 0">
                Is Developer
            </CheckBox>
        </StackPanel>
    </Grid>
</UserControl>
